import { NextResponse, type NextRequest } from "next/server"
import { Resend } from "resend"

// N·∫øu b·∫°n ƒëang d√πng Edge, b·ªè d√≤ng d∆∞·ªõi. Resend ch·∫°y Node t·ªët h∆°n:
export const runtime = "nodejs"

const resend = new Resend(process.env.RESEND_API_KEY)

function sanitize(s: unknown) {
  return String(s ?? "").trim()
}

function isPhoneVN(p: string) {
  // ƒë∆°n gi·∫£n: 9‚Äì11 s·ªë, cho ph√©p +84
  return /^(\+?84|0)\d{8,10}$/.test(p.replace(/\s+/g, ""))
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const type = sanitize(body.type) || "consultation"
    const customerName = sanitize(body.customerName)
    const customerAddress = sanitize(body.customerAddress)
    const customerPhone = sanitize(body.customerPhone)
    const message = sanitize(body.message)

    // Validate t·ªëi thi·ªÉu
    const errors: string[] = []
    if (!customerName) errors.push("Thi·∫øu h·ªç v√† t√™n")
    if (!customerAddress) errors.push("Thi·∫øu ƒë·ªãa ch·ªâ")
    if (!customerPhone || !isPhoneVN(customerPhone)) errors.push("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")
    if (!message) errors.push("Thi·∫øu n·ªôi dung t∆∞ v·∫•n")

    if (errors.length) {
      return NextResponse.json({ ok: false, errors }, { status: 400 })
    }

    const html = `
      <h2>üì© ƒêƒÉng k√Ω t∆∞ v·∫•n m·ªõi</h2>
      <p><b>Lo·∫°i:</b> ${type}</p>
      <p><b>Kh√°ch h√†ng:</b> ${customerName}</p>
      <p><b>ƒê·ªãa ch·ªâ:</b> ${customerAddress}</p>
      <p><b>S·ªë ƒëi·ªán tho·∫°i:</b> ${customerPhone}</p>
      <p><b>N·ªôi dung t∆∞ v·∫•n:</b></p>
      <div style="white-space:pre-wrap;border-left:4px solid #eee;padding-left:12px">${message}</div>
      <hr />
      <p style="color:#888">Email g·ª≠i t·ª´ website.</p>
    `

    // G·ª≠i v·ªÅ h·ªôp th∆∞ c·ªßa b·∫°n
    await resend.emails.send({
      from: "System Toteallygreen <toteallygreen.system@resend.dev>",
      to:  "toteallygreen.official@gmail.com",
      subject: `ƒêƒÉng k√Ω t∆∞ v·∫•n ‚Äî ${customerName}`,
      html,
    })

    // (Tu·ª≥ ch·ªçn) g·ª≠i auto-reply cho kh√°ch n·∫øu b·∫°n mu·ªën:
    // if (body.customerEmail) {
    //   await resend.emails.send({
    //     from: process.env.FROM_IDENTITY || "Website <noreply@yourdomain.com>",
    //     to: body.customerEmail,
    //     subject: "X√°c nh·∫≠n ƒë√£ nh·∫≠n ƒëƒÉng k√Ω t∆∞ v·∫•n",
    //     html: `<p>Ch√†o ${customerName},</p><p>Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c th√¥ng tin t∆∞ v·∫•n c·ªßa b·∫°n v√† s·∫Ω li√™n h·ªá s·ªõm nh·∫•t.</p>`,
    //   })
    // }

    return NextResponse.json({ ok: true })
  } catch (err) {
    console.error("Error sending consultation email:", err)
    return NextResponse.json({ ok: false, error: "Failed to process registration" }, { status: 500 })
  }
}
